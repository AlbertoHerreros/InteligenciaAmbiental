/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package es.uja.iambiental.curso2324.gui;

import es.uja.iambiental.curso2324.utils.pair;
import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.paho.client.mqttv3.MqttClient;

/**
 *
 * @author Alberto Limas
 */
public class Interfaz extends javax.swing.JFrame {

    private final Ciudad2 ciudad;
    private final ListaEntregas listaEntregas;
    private final ArrayList<pair> listaInicios;
    private final ArrayList<pair> listaFinales;
    private MqttClient clienteMQTT;
    private final Object lock = new Object();

    private ArrayList<String> trayectorias;
    int cont;

    /**
     * Creates new form Interfaz
     *
     * @param ciudad
     */
    public Interfaz(Ciudad2 ciudad) {
        initComponents();
        this.ciudad = ciudad;
        this.setLayout(new FlowLayout(FlowLayout.LEFT));
        this.setSize(1000, ciudad.getHeight());
        this.add(ciudad);
        this.setTitle("Inteligencia Ambiental");
        listaEntregas = new ListaEntregas();
        this.add(listaEntregas);
        this.listaEntregas.setVisible(true);
        this.pack();
        listaInicios = new ArrayList<>();
        listaFinales = new ArrayList<>();
        trayectorias = new ArrayList<>();
        trayectorias.add("");
        trayectorias.add("");
        cont = 0;

    }

    /**
     * Algoritmo encargado de generar un camino entre 2 puntos
     *
     * @param i: inicio
     * @param j: fin
     */
    public void camino(int i, int j,int numTrayecto) {

        Thread thread = new Thread(() -> {
            synchronized (lock) {
                String tr = "";
                int xIni = i / 5;
                int xFin = j / 5;
                int yIni = i % 5;
                int yFin = j % 5;
                System.out.println("CAMINO [" + xIni + "," + yIni + "]");
                this.camionero(xIni, yIni);
                trayectorias.set(numTrayecto, trayectorias.get(numTrayecto) + "" + xIni + yIni + ",");

                try {
                    Thread.sleep(1);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
                trayectoria(i, j, numTrayecto);
                System.out.println("CAMINO [" + xFin + "," + yFin + "]");
                try {
                    Thread.sleep(1);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.camionero(xFin, yFin);
                trayectorias.set(numTrayecto, trayectorias.get(numTrayecto) + "" + xFin + yFin);
                cont++;
            }

        });
        thread.start();

    }

    /**
     * Algoritmo auxiliar para generar el camino entre 2 puntos desde camino()
     *
     * @param interf
     * @param i: inicio
     * @param j: fin
     */
    private void trayectoria(int i, int j,int numTrayecto) {
        int k = this.ciudad.getMatrizP()[i][j];
        if (k != 0) {
            trayectoria(i, k,numTrayecto);
            int x = k / 5;
            int y = k % 5;
            System.out.println("Trayectoria: [" + x + "," + y + "]");
            try {
                Thread.sleep(1);
            } catch (InterruptedException ex) {
                Logger.getLogger(Ciudad2.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.camionero(x, y);
            trayectorias.set(numTrayecto, trayectorias.get(numTrayecto) + "" + x + y + ",");
            trayectoria(k, j, numTrayecto);
        }
    }

    public void camionero(int i, int j) {
        this.ciudad.pintarCamion(i, j);
        this.pack();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Confirmar Puntos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(220, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Mandar camino a realizar
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        trayectorias.set(0, "");
        trayectorias.set(1, "");
        
        String str = ciudad.confirmarPuntos();
        String camion = ciudad.obtenerPosCamion();

        if (!"".equals(str)) {
            String partes[] = str.split(";");
            String partes1[] = partes[0].split(",");
            String partes2[] = partes[1].split(",");
            int xIni = Integer.parseInt(partes1[0]);
            int yIni = Integer.parseInt(partes1[1]);
            int xFin = Integer.parseInt(partes2[0]);
            int yFin = Integer.parseInt(partes2[1]);
            this.listaInicios.add(new pair(
                    xIni, yIni)
            );
            this.listaFinales.add(new pair(
                    xFin, yFin
            ));
            System.out.println(str);
            this.listaEntregas.agregarEntrega(str);

            String cam[] = camion.split(";");
            int xCamion = Integer.parseInt(cam[0]);
            int yCamion = Integer.parseInt(cam[1]);
            
            this.camino(xCamion * 5 + yCamion, xIni * 5 + yIni,0);
            this.camino(xIni * 5 + yIni, xFin * 5 + yFin,1);
            while (cont != 2) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            cont = 0;
            System.out.println("EL CAMINO A REALIZAR: " + trayectorias.get(0) + ";" + trayectorias.get(1));
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    public void setCliente(MqttClient client) {
        this.clienteMQTT = client;
    }
}
